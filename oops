class happy
    a=100
    def method(self):
        b=12
        print(self.a)
        print(b)
obj=happy()
print(obj.a)
obj.method()

************************************

#protected_
class encap:
    _a=10
    c=20
    def encapfunction(self):
    _b=200
    print("Encap function-accessing protected")
    print(self._a+10)
    
obj=encap()
print(obj._a)
obj.encapfunction()
print(obj.c)

************************************

#private

class encap:
    __a=10
    print(__a)
    def encapfunction(self):
    print("Encap function")
    print(self.__a)
obj=encap()
obj.encapfunction()
print(obj.__a)#will throw error #bcs a is private, can't be acesed #outside class #public

************************************

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelikedlist:
    def __init__(self):
        self.head=None

    def insert_beginning(self,data):
        nb=Node(data)
        nb.next=self.head
        self.head=nb
    
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"-->",end=" ")
                temp=temp.next
obj=singlelikedlist()
n=Node(10)
obj.head=n
n1=Node(20)
obj.head.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
print("Befor inserting 100")
obj.display()
print('')
print("After inserting 100")
obj.insert_beginning(100)
obj.display()
print("After inserting 555")
obj.insert_beginning(555)
obj.display()

******************************************

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelikedlist:
    def __init__(self):
        self.head=None

    def insert_beginning(self,pos,data):
        np=Node(data)
        temp=self.head
        for i in range(pos-1):
            temp=temp.next
            
        np.next=temp.next
        temp.next=np
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"-->",end=" ")
                temp=temp.next
obj=singlelikedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print()
obj.insert_position(2,1000)
obj.display()

*****************************************

import random
n = random.randrange(1,100)
guess = int(input("enter any number: "))
while n!= guess:
    if guess < n:
        print("too low")
        guess = int(input("enter number again: "))
    elif guess > n:
        print("too high!")
        guess = int(input("enter number again: "))
    else:
        break
print("you guessed it right!!")

******************************************


# SINGLE LINKED LIST IMPLEMENTATION #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class SLL:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("LL is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "==>", end=" ")
                temp=temp.next
obj=SLL()
n1=Node(100)
obj.head=n1
n2=Node(200)
obj.head.next=n2
n3=Node(300)
n2.next=n3
obj.display()




#SINGLE LINKED LIST INSERT OPERATION AT BEGINNING #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
    def insert_beginning(self,data):
        nb=Node(data)
        nb.next=self.head
        self.head=nb
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "==>", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
print("Before inserting 100")
obj.display()
print(" ")
print("After inserting 100")
obj.insert_beginning(100)
obj.display()
print(" ")
print("After inserting 555")
obj.insert_beginning(555)
obj.display()


# SINGLE LINKED LIST INSERT OPERATION AT END #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def insert_end(self,data):
        ne=Node(data)
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=ne
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.insert_end(11111)
obj.display()








# SINGLELINKED LIST INSERT AT A POSITION#

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def insert_position(self,pos,data):
        ne=Node(data)
        temp=self.head
        for i in range(pos-1):
            temp=temp.next
        #ne.data=data
        ne.next=temp.next
        temp.next=ne
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.insert_position(2,1000)
obj.display()



#SINGLE LINKED LIST DELETE OPERATION AT POSITION#

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def delete_position(self,pos):
        temp=self.head.next
        prev=self.head
        for i in range(1,pos-1):
            temp=temp.next
            prev=prev.next
        prev.next=temp.next
        temp.next=None
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.delete_position(3)
obj.display()






#SINGLE LINKED LIST DELETE OPERATION AT BEGINNING #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def delete(self):
        temp=self.head
        self.head=temp.next
        temp.next=None
        
       
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.delete()
obj.display()





#SINGLE LINKED LIST DELETE OPERATION AT END #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def delete(self,data):
        temp=self.head.next
        prev=self.head
    for i in range (1,prev.next):
        temp=temp.next
        prev=prev.next
        prev.next=None 
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.delete()
obj.display()
